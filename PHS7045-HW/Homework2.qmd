---
title: "Homework2"
format: html
editor: visual
author: Yidan Zhang
---

## **Data Wrangling**

You will need to download two datasets from https://github.com/USCbiostats/data-science-data. The [individual](https://raw.githubusercontent.com/USCbiostats/data-science-data/master/01_chs/chs_individual.csv) and [regional](https://raw.githubusercontent.com/USCbiostats/data-science-data/master/01_chs/chs_regional.csv) CHS datasets in `01_chs`. The individual data includes personal and health characteristics of children in 12 communities across Southern California. The regional data include air quality measurements at the community level.

```{r}
rm(list=ls())
library(data.table)
library(tidyverse)
library(naniar)
library(knitr)
library(gt)

individual <- fread("https://raw.githubusercontent.com/USCbiostats/data-science-data/master/01_chs/chs_individual.csv")

regional <- fread("https://raw.githubusercontent.com/USCbiostats/data-science-data/master/01_chs/chs_regional.csv")

#str(individual)
#str(regional)
# noticed that the binary variables are coded as numeric 
```

Once downloaded, you can merge these datasets using the location variable. Once combined, you will need to do the following:

After merging the data, make sure you don’t have any duplicates by counting the number of rows. Make sure it matches.

```{r}
data <- merge(individual,regional,by.x="townname",by.y="townname",all.x = TRUE)
#check the duplicates after merge
sum(duplicated(data))
nrow(data)
nrow(individual)
```

In the case of missing values, impute data using the average within the variables “male” and “hispanic.”

```{r}
#checking the missing condition for the data
miss_var_summary(data)
```

```{r}
#converge the binary variables from numeric to character
cols_to_convert <- c("male","hispanic","asthma","active_asthma","father_asthma",
                     "mother_asthma","wheeze","hayfever","allergy","educ_parent",
                     "smoke","pets","gasstove")
data[, (cols_to_convert) := lapply(.SD, as.character), .SDcols = cols_to_convert]
#str(data)

#Prepare to impute

#Single imputation for the data, replace missing of continuous variables with the observed mean #and missing of categorical variables with the observed mode

#mode() function returns the type or storage mode for R objects such as "character" or #"numeric", can't use here

#Both height and weight are integers, I would like the imputed value still be integer
mode_func <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

for (col in names(data)) {
 
  if (is.numeric(data[[col]])) {
    
    # Check if the column is integer or numeric
    if (is.integer(data[[col]])) {
      # Integer: Use rounded mean to impute, keep it integer
      data[, (col) := ifelse(is.na(get(col)), round(mean(get(col), na.rm = TRUE)), get(col)), by = .(male, hispanic)]
      
    } else if (is.double(data[[col]])) {
      # Numeric (double): Use mean to impute, keep it numeric
      data[, (col) := ifelse(is.na(get(col)), mean(get(col), na.rm = TRUE), get(col)), by = .(male, hispanic)]
    }
  
  } else if (is.character(data[[col]])) {
    # Character: Use mode to impute
    data[, (col) := ifelse(is.na(get(col)), mode_func(get(col)), get(col)), by = .(male, hispanic)]
  }
}

#test for missing again
miss_var_summary(data)
```

2.  Create a new categorical variable named “obesity_level” using the BMI measurement (underweight BMI\<14; normal BMI 14-22; overweight BMI 22-24; obese BMI\>24). To make sure the variable is rightly coded, create a summary table that contains the minimum BMI, maximum BMI, and the total number of observations per category.

```{r}
data[, obesity_level := cut(bmi, 
                          breaks = c(-Inf, 14, 22, 24, Inf),  # Define bins
                          labels = c("Underweight", "Normal", "Overweight", "Obese"))] 
data[, obesity_level :=factor(obesity_level,levels = c("Underweight", "Normal", "Overweight", "Obese"))]

summary_obesity <- data[, .(
  minimum_BMI = round(min(bmi),2),
  maximum_BMI = round(max(bmi),2),
  total_obs = .N 
), by = obesity_level][order(obesity_level)]

kable(summary_obesity,caption="Summary table of BMI by Obesity level")
```

3.  Create another categorical variable named “smoke_gas_exposure” that summarizes “Second Hand Smoke” and “Gas Stove.” The variable should have four categories in total.

    ```{r}
    data[,smoke_gas_exposure:=fifelse(smoke == 0 & gasstove == 0, "No Exposure",
                                      fifelse(smoke == 1 & gasstove == 0, "Smoke Only",
                                              fifelse(smoke == 0 & gasstove == 1, "Gas Stove Only",
                                                      "Both Exposures")))]
    #check how many categories does smoke_gas_exposure contain
    table(data$smoke_gas_exposure)
    ```

4.  Create four summary tables showing the average (or proportion, if binary) and sd of “Forced expiratory volume in 1 second (ml)” and asthma indicator by town, sex, obesity level, and “smoke_gas_exposure.”

    ```{r}
    summary <- function(group,group_label){
      summary_table <- data[, .(
      mean_fev1_sd = paste0(round(mean(fev, na.rm = TRUE), 1), " (", 
                            round(sd(fev, na.rm = TRUE), 1), ")"),  # Mean (SD) of FEV1
      asthma_prop = sum(asthma=="1")/nrow(data)           # Proportion of asthma
    ), by = group]
      # Create a gt table for better formatting
      gt_table <- gt(summary_table) %>%
      tab_header(
        title =  paste("Summary of FEV1 and Asthma by", group_label)
      ) %>%
      cols_label(
        !! group := group_label,
        mean_fev1_sd = "FEV1  mean(sd)",
        asthma_prop = "Asthma Proportion"
      ) %>%
      fmt_percent(
        columns = "asthma_prop", decimals = 1
      )
      gt_table
    }
    summary("townname","Town")
    summary("male","Sex")
    summary("obesity_level","Obesity Level")
    summary("smoke_gas_exposure","Smoke Gas Exposure")
    ```
